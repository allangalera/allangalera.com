---
---

<span data-tooltip-wrapper>
  <slot />
  <div
    role="tooltip"
    data-tooltip
    class="w-max absolute top-0 left-0 bg-zinc-600 text-zinc-50 rounded p-1 hidden"
  >
    <div class="text-xs text-zinc-50">
      <slot name="tooltip-content" />
    </div>
    <div data-tooltip-arrow class="absolute bg-zinc-600 w-3 h-3 rotate-45 z-50">
    </div>
  </div>
</span>

<script>
  import {
    computePosition,
    flip,
    offset,
    shift,
    arrow,
  } from '@floating-ui/dom';

  const tooltipWrapper = document.querySelectorAll('[data-tooltip-wrapper]');

  tooltipWrapper.forEach((tooltipWrapper) => {
    const element = tooltipWrapper.querySelector('[data-tooltip-element]');
    const arrowElement: HTMLElement | null = tooltipWrapper.querySelector(
      '[data-tooltip-arrow]',
    );
    const tooltip: HTMLElement | null =
      tooltipWrapper.querySelector('[data-tooltip]');

    if (!element || !arrowElement || !tooltip) {
      return;
    }

    function update() {
      if (!element || !arrowElement || !tooltip) {
        return;
      }
      computePosition(element, tooltip, {
        placement: 'bottom',
        middleware: [
          offset(12),
          flip(),
          shift({ padding: 6 }),
          arrow({ element: arrowElement }),
        ],
      }).then(({ x, y, placement, middlewareData }) => {
        Object.assign(tooltip.style, {
          left: `${x}px`,
          top: `${y}px`,
        });

        const arrowData = middlewareData.arrow;

        if (!arrowData) {
          return;
        }

        const { x: arrowX, y: arrowY } = arrowData;

        const staticSide = {
          top: 'bottom',
          right: 'left',
          bottom: 'top',
          left: 'right',
        }[placement.split('-')[0]];

        if (!staticSide) {
          return;
        }

        Object.assign(arrowElement.style, {
          left: arrowX != null ? `${arrowX}px` : '',
          top: arrowY != null ? `${arrowY}px` : '',
          right: '',
          bottom: '',
          [staticSide]: '-4px',
        });
      });
    }

    function showTooltip() {
      if (!tooltip) {
        return;
      }
      tooltip.style.display = 'block';
      update();
    }

    function hideTooltip() {
      if (!tooltip) {
        return;
      }
      tooltip.style.display = '';
    }

    element.addEventListener('mouseenter', showTooltip);
    element.addEventListener('mouseleave', hideTooltip);
    element.addEventListener('focus', showTooltip);
    element.addEventListener('blur', hideTooltip);
  });
</script>
