---
import '../styles/global.css';
import { SEO } from 'astro-seo';
import type { Props as SEOProps } from 'astro-seo';
import { Footer } from '@/components/Footer';
import { Header } from '@/components/Header';
import { getPaginatedPosts } from '@/data/_utils';
import { IS_NODE_PRODUCTION } from '@/utils';

const posts = await getPaginatedPosts();

export interface Props {
  seoOptions: SEOProps;
}

const { seoOptions } = Astro.props;

const seoDefaultOptions = {
  title: 'Allan Galera',
  description: 'Allan Galera personal website',
  twitter: {
    creator: '@allangalera',
    site: 'allangalera.com',
  },
} satisfies SEOProps;

const seo = {
  ...seoDefaultOptions,
  ...seoOptions,
};
---

<!doctype html>
<html lang="en">
  <head>
    <script is:inline>
      const THEME_OPTIONS = {
        Light: 'light',
        Dark: 'dark',
        System: 'system',
      };

      const themes = Object.values(THEME_OPTIONS);

      const isTheme = (value) => {
        return themes.includes(value);
      };

      const getCurrentSystemTheme = () => {
        return window.matchMedia('(prefers-color-scheme: dark)').matches
          ? THEME_OPTIONS.Dark
          : THEME_OPTIONS.Light;
      };

      const setTheme = (theme) => {
        switch (theme) {
          case THEME_OPTIONS.Dark:
            document.documentElement.classList.add(THEME_OPTIONS.Dark);
            break;
          case THEME_OPTIONS.System:
            if (getCurrentSystemTheme() === THEME_OPTIONS.Dark) {
              document.documentElement.classList.add(THEME_OPTIONS.Dark);
            } else {
              document.documentElement.classList.remove(THEME_OPTIONS.Dark);
            }
            break;
          case THEME_OPTIONS.Light:
            document.documentElement.classList.remove(THEME_OPTIONS.Dark);
        }

        localStorage.setItem('theme', theme);
      };

      const getTheme = () => {
        const themeFromLocalStorage = localStorage.getItem('theme');
        if (themeFromLocalStorage == null || !isTheme(themeFromLocalStorage)) {
          return THEME_OPTIONS.System;
        }

        return themeFromLocalStorage;
      };

      function initializeColorScheme() {
        const currentTheme = getTheme();

        setTheme(currentTheme);
      }

      initializeColorScheme();

      window
        .matchMedia('(prefers-color-scheme: dark)')
        .addEventListener('change', () => {
          if (getTheme() === THEME_OPTIONS.System) {
            setTheme(THEME_OPTIONS.System);
          }
        });
    </script>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="sitemap" href="/sitemap-index.xml" />
    {
      IS_NODE_PRODUCTION && (
        <script
          defer
          src="https://umami-fly-io.fly.dev/script.js"
          data-website-id="2292440b-6860-47b2-83ab-ce8e049c7281"
        />
      )
    }
    <SEO {...seo} />
  </head>
  <body
    class="prose-zinc grid min-h-[100svh] grid-rows-[max-content_1fr_max-content] bg-zinc-50 font-sans text-zinc-900 dark:bg-zinc-900 dark:text-zinc-50"
  >
    <Header client:load hasPosts={Boolean(posts?.length)} />
    <main class="flex flex-col items-center p-5">
      <slot />
    </main>
    <Footer client:load />
  </body>
</html>
